#!/bin/bash

set -eo pipefail

# If using a locally built stateless CI container, export ANCHORE_CI_IMAGE=<image_name>. 
# This will override the image name from Dockerhub.
INLINE_SCAN_IMAGE="${ANCHORE_CI_IMAGE:-docker.io/anchore/inline-scan:v0.3.3}"

display_usage() {
cat << EOF
  
Anchore Engine Inline Scan --

  Wrapper script for performing vulnerability analysis on local docker images, utilizing Anchore Engine inline_scan container.  
  
  Images should be built & tagged locally, or remote images can be pulled with the -p option.

  
  Usage: ${0##*/} [ -f ] [ -p ] [ -r ] [ -t 300 ] [ -v ./anchore_images ] [ -d ./Dockerfile ] [ -b ./policy.json ] [ IMAGE_ONE ] [ IMAGE_TWO ] [ ... ]

      -b  [optional] Path to local Anchore policy bundle.
      -d  [optional] Path to local Dockerfile.
      -v  [optional] Path to directory to be mounted as docker volume. All image archives in directory will be scanned.
      -f  [optional] Exit script upon failed Anchore policy evaluation.
      -p  [optional] Pull remote docker images.
      -r  [optional] Generate analysis reports in your current working directory.
      -t  [optional] Specify timeout for image scanning in seconds (defaults to 300s).
 
EOF
}

interupt() {
    cleanup 130
}

cleanup() {
    ret="$?"
    if [[ "${#@}" -ge 1 ]]; then
        ret="$1"
    fi
    set +e

    if [[ -z "$docker_id" ]]; then
        docker_id="${DOCKER_NAME:-$(docker ps -a | grep 'inline-anchore-engine' | awk '{print $1}')}"
    fi

    for id in $docker_id; do
        declare timeout=0
        while (docker ps -a | grep "${id:0:10}") > /dev/null && [[ "$timeout" -lt 12 ]]; do
            docker kill "$id" &> /dev/null
            docker rm "$id" &> /dev/null
            printf '\n%s\n' "Cleaning up docker container: $id"
            ((timeout=timeout+1))
            sleep 5
        done

        if [[ "$timeout" -ge 12 ]]; then
            exit 1
        fi
        unset docker_id
    done
    
    if [[ "${#IMAGE_FILES[@]}" -ge 1 ]]; then
        for file in "${IMAGE_FILES[@]}"; do
            if [[ -f "$file" ]]; then
                rm -f "/tmp/${file}"
            fi
        done
    fi

    exit "$ret"
}

trap 'cleanup' EXIT ERR SIGTERM 
trap 'interupt' SIGINT

# Parse options
while getopts ':d:b:v:t:fhrp' option; do
  case "$option" in
    h  ) display_usage; exit;;
    d  ) d_flag=true; DOCKERFILE="$OPTARG";;
    f  ) f_flag=true;;
    r  ) r_flag=true;;
    b  ) b_flag=true; POLICY_BUNDLE="$OPTARG";;
    p  ) p_flag=true;;
    t  ) t_flag=true; TIMEOUT="$OPTARG";;
    v  ) v_flag=true; VOLUME_PATH="$(cd "$(dirname "$OPTARG")"; pwd -P)/$(basename "$OPTARG")";; # Get absolute path of file
    \? ) printf "\n\t%s\n\n" "  Invalid option: -${OPTARG}" >&2; display_usage >&2; exit 1;;
    :  ) printf "\n\t%s\n\n%s\n\n" "  Option -${OPTARG} requires an argument." >&2; display_usage >&2; exit 1;;
  esac
done

shift "$((OPTIND - 1))"

# Check for invalid options
if [[ ! $(which docker) ]]; then
    printf '\n\t%s\n\n' 'ERROR - Docker is not installed or cannot be found in $PATH.' >&2
    display_usage >&2
    exit 1
elif [[ "$d_flag" ]] && [[ "${#@}" -gt 1 ]]; then
    printf '\n\t%s\n\n' "ERROR - If specifying a Dockerfile, only 1 image can be scanned at a time." >&2
    display_usage >&2
    exit 1
elif [[ "$r_flag" ]] && ! (mkdir -p ./anchore-reports); then
    printf '\n\t%s\n\n' "ERROR - ${PWD}/anchore-reports is not writable." >&2
    display_usage >&2
    exit 1
elif [[ "$b_flag" ]] && [[ ! -f "$POLICY_BUNDLE" ]]; then
    printf '\n\t%s\n\n' "ERROR - Policy Bundle: $POLICY_BUNDLE does not exist." >&2
    display_usage >&2
    exit 1
elif [[ "$d_flag" ]] && [[ ! -f "$DOCKERFILE" ]]; then
    printf '\n\t%s\n\n' "ERROR - Dockerfile: $DOCKERFILE does not exist." >&2
    display_usage >&2
    exit 1
elif [[ ! "v_flag" ]] && [[ "${#@}" -eq 0 ]]; then
    printf '\n\t%s\n\n' "ERROR - ${0##*/} requires at least 1 image name as input, unless utilizing -v option." >&2
    display_usage >&2
    exit 1
elif [[ "$v_flag" ]] && [[ ! -d "$VOLUME_PATH" ]]; then
    printf '\n\t%s\n\n' "ERROR - $VOLUME_PATH is not a directory." >&2
    exit 1
elif [[ "$v_flag" ]] && [[ "$d_flag" ]]; then
    printf '\n\t%s\n\n' "ERROR - cannot specify image volume & Dockerfile. Dockerfile option only supports scanning one image at time." >&2
    exit 1
elif [[ "$t_flag" ]] && [[ ! "$TIMEOUT" =~ ^[0-9]+$ ]]; then
    printf '\n\t%s\n\n' "ERROR - timeout must be set to a valid integer." >&2
    display_usage >&2
    exit 1
fi

IMAGE_NAMES=()
# Add all unique positional input params to IMAGE_NAMES array
for i in "$@"; do
    if [[ ! "${IMAGE_NAMES[@]}" =~ "$i" ]]; then
        IMAGE_NAMES+=("$i")
    fi
done

SCAN_IMAGES=()
FAILED_IMAGES=()

# Make sure all images are available locally, add to FAILED_IMAGES array if not
for i in "${IMAGE_NAMES[@]}"; do
    if [[ "$p_flag" ]]; then
        printf '\n%s\n' "Pulling image -- $i"
        docker pull $i || true
    fi

    docker inspect "$i" &> /dev/null || FAILED_IMAGES+=("$i")

    if [[ ! "${FAILED_IMAGES[@]}" =~ "$i" ]]; then
        SCAN_IMAGES+=("$i")
    fi
done

# Give error message on any invalid image names
if [[ "${#FAILED_IMAGES[@]}" -gt 0 ]]; then
    printf '\n\t%s\n\n' "### WARNING - Please pull remote image, or build/tag all local images before attempting analysis again. ###" >&2

    if [[ "${#FAILED_IMAGES[@]}" -ge "${#IMAGE_NAMES[@]}" ]]; then
        printf '\n\t%s\n\n' "ERROR - no local docker images specified in script input: ${0##*/} ${IMAGE_NAMES[*]}" >&2
        display_usage >&2
        exit 1
    fi

    for i in "${FAILED_IMAGES[@]}"; do
        printf '\t\t%s\n' "Could not find image locally - $i" >&2
    done
fi

# Check if env var is overriding the inline-scan image to utilize.
if [[ -z "$ANCHORE_CI_IMAGE" ]]; then
    printf '\n%s\n' "Pulling $INLINE_SCAN_IMAGE"
    docker pull "$INLINE_SCAN_IMAGE"
else
    printf '\n%s\n' "Using local image for scanning -- $INLINE_SCAN_IMAGE"
fi

COPY_CMDS=()
CREATE_CMD=()
DOCKER_NAME="${RANDOM:-TEMP}-inline-anchore-engine"
RUN_CMD=("docker run -i --name $DOCKER_NAME $INLINE_SCAN_IMAGE")

if [[ "$v_flag" ]]; then
    printf '\n%s\n' "Creating volume mount -- ${VOLUME_PATH}:/anchore-engine"
    CREATE_CMD=('docker create -v "${VOLUME_PATH}:/anchore-engine:rw" --name "$DOCKER_NAME" "$INLINE_SCAN_IMAGE"')
else
    CREATE_CMD=('docker create --name "$DOCKER_NAME" "$INLINE_SCAN_IMAGE"')
fi

if [[ "$f_flag" ]]; then
    CREATE_CMD+=('-f')
    RUN_CMD+=('-f')
fi

if [[ "$r_flag" ]]; then
    CREATE_CMD+=('-r')
    RUN_CMD+=('-r')
fi

if [[ "$t_flag" ]]; then
    CREATE_CMD+=('-t "$TIMEOUT"')
    RUN_CMD+=('-t "$TIMEOUT"')
fi

# If no files need to be copied to container, pipe docker save output to stdin of docker run command.
if [[ ! "$d_flag" ]] && [[ ! "$v_flag" ]] && [[ ! "$b_flag" ]] && [[ "${#SCAN_IMAGES[@]}" -eq 1 ]]; then
    printf '\n\t%s\n' "Preparing image for analysis -- ${SCAN_IMAGES[*]}"
    RUN_CMD+=('-i "${SCAN_IMAGES[*]}"')
    docker save "${SCAN_IMAGES[*]}" | eval "${RUN_CMD[*]}"
else
    # Prepare commands for container creation & copying all files to container.
    if [[ "$b_flag" ]]; then
        CREATE_CMD+=('-b "$POLICY_BUNDLE"')
        COPY_CMDS+=('docker cp "$POLICY_BUNDLE" "${DOCKER_NAME}:/anchore-engine/$(basename $POLICY_BUNDLE)";')
    fi
    
    if [[ "$d_flag" ]] && [[ "${#SCAN_IMAGES[@]}" -eq 1 ]]; then
        CREATE_CMD+=('-d "$DOCKERFILE" -i "${SCAN_IMAGES[*]}"')
        COPY_CMDS+=('docker cp "$DOCKERFILE" "${DOCKER_NAME}:/anchore-engine/$(basename $DOCKERFILE)";')
    fi

    docker_id=$(eval "${CREATE_CMD[*]}")
    eval "${COPY_CMDS[*]}"
    
    IMAGE_FILES=()
    # Save all image files to /tmp and copy to created container
    for image in "${SCAN_IMAGES[@]}"; do
        base_image_name=$(basename "$image")
        printf '\n\t%s\n' "Preparing image for analysis -- $image"
        if [[ "$base_image_name" =~ [:]{1} ]]; then
            repo="${base_image_name%:*}"
            tag="${base_image_name#*:}"
        else
            repo="$base_image_name"
            tag="latest"
        fi
        save_file_name="${repo}+${tag}.tar" 
        IMAGE_FILES+=("$save_file_name")
        
        if [[ "$v_flag" ]]; then
            save_file_path="${VOLUME_PATH}/${save_file_name}"
        else
            save_file_path="/tmp/${save_file_name}"
        fi

        docker save "$image" -o "$save_file_path"
        printf '\t%s\n' "Successfully prepared image file -- $save_file_path"
        if [[ ! -f "$save_file_path" ]]; then
            printf '\n\t%s\n\n' "ERROR - unable to save docker image to $save_file_path." >&2
            display_usage >&2
            exit 1
        fi

        if [[ ! "$v_flag" ]]; then
            docker cp "$save_file_path" "${DOCKER_NAME}:/anchore-engine/${save_file_name}"
            rm -f "$save_file_path"
        fi
    done

    docker start -ia "$DOCKER_NAME"
fi

if [[ "$r_flag" ]]; then
    echo "Copying analysis reports from ${DOCKER_NAME} to ${PWD}/anchore-reports/"
    docker cp "${DOCKER_NAME}:/anchore-engine/anchore-reports/" ./
fi